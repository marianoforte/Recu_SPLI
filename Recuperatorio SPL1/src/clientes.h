#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <conio.h>
#include "LinkedList.h"
#include "autos.h"

#ifndef CLIENTES_H_INCLUDED
#define CLIENTES_H_INCLUDED

typedef struct{
    int id;
    int idAuto;
    char nombre[51];
    char apellido[51];
    char email[51];
    char telefono[51];
}eCliente;


/////////////// ID ///////////////


/** \brief Sets the last ID generated by the user
 *
 * \param newId int The ID to set
 * \return int [-1] if ID is lower or equals than zero
               [0] if the ID was setted correctly
 *
 */
int cliente_setLastId(int newId);

/** \brief Gets the last ID registered on the system
 *
 * \param void
 * \return the last ID
 *
 */
int cliente_getLastId(void);

/** \brief Increases the last ID registered on the system
 *
 * \param void
 * \return the increased ID by one
 *
 */
int cliente_increaseLastId(void);

/** \brief Increases the last ID registered on the system
 *
 * \param void
 * \return the decreased ID by one
 *
 */
int cliente_decreaseLastId(void);


/////////////// CONSTRUCTOR ///////////////


/** \brief Creates dynamic space on memmory for a list
 *
 * \param void
 * \return the memmory allocation for the specific list
 *
 */
eCliente* cliente_new(void);

/** \brief Constructs an input of a new parameter for the listing
 *
 * \param idCliente char* The client Id to receive
 * \param idAuto char* The car Id to input
 * \param nombre char* The name to input
 * \param apellido char* The last name to input
 * \param email char* The email to input
 * \param telefono char* The phone to input
 * \return The new parameter to set on the list
 *
 */
eCliente* cliente_newParametros(char* idCliente, char* idAuto, char* nombre, char* apellido, char* email, char* telefono);


/////////////// GETTERS ///////////////


/** \brief Gets the client's ID
 *
 * \param this eCliente* The pointer to the list
 * \param id int* The pointer to the variable where to store the Id after being getted
 * \return int [-1] if the list or the id pointer is NULL
               [0] if the ID was getted correctly
 *
 */
int cliente_getIdCliente(eCliente* this,int* id);

/** \brief Gets the client's related car ID
 *
 * \param this eCliente* The pointer to the list
 * \param id int* The pointer to the variable where to store the Id after being getted
 * \return int [-1] if the list or the id pointer is NULL
               [0] if the ID was getted correctly
 *
 */
int cliente_getIdAuto(eCliente* this,int* id);

/** \brief Gets the client's name
 *
 * \param this eCliente* The pointer to the list
 * \param nombre char* The pointer to the variable where to store the name after being getted
 * \return int [-1] if the list or the name pointer is NULL
               [0] if the name was getted correctly
 *
 */
int cliente_getNombre(eCliente* this,char* nombre);

/** \brief Gets the client's last name
 *
 * \param this eCliente* The pointer to the list
 * \param apellido char* The pointer to the variable where to store the last name after being getted
 * \return int [-1] if the list or the last name pointer is NULL
               [0] if the last name was getted correctly
 *
 */
int cliente_getApellido(eCliente* this,char* apellido);

/** \brief Gets the client's e-mail
 *
 * \param this eCliente* The pointer to the list
 * \param e-mail char* The pointer to the variable where to store the e-mail after being getted
 * \return int [-1] if the list or the e-mail pointer is NULL
               [0] if the e-mail was getted correctly
 *
 */
int cliente_getEmail(eCliente* this,char* email);

/** \brief Gets the client's phone
 *
 * \param this eCliente* The pointer to the list
 * \param phone char* The pointer to the variable where to store the phone after being getted
 * \return int [-1] if the list or the phone pointer is NULL
               [0] if the phone was getted correctly
 *
 */
int cliente_getTelefono(eCliente* this,char* telefono);


/////////////// SETTERS ///////////////


/** \brief Sets the client's ID
 *
 * \param this eCliente* The pointer to the list
 * \param id int The ID to set
 * \return int [-1] if the list or the id pointer is NULL
               [0] if the ID was getted correctly
 *
 */
int cliente_setIdCliente(eCliente* this,int id);

/** \brief Sets the client's related car ID
 *
 * \param this eCliente* The pointer to the list
 * \param id int The car ID to set
 * \return int [-1] if the list or the id pointer is NULL
               [0] if the ID was setted correctly
 *
 */
int cliente_setIdAuto(eCliente* this,int id);

/** \brief Sets the client's name
 *
 * \param this eCliente* The pointer to the list
 * \param nombre int The name to set
 * \return int [-1] if the list or the name pointer is NULL
               [0] if the name was setted correctly
 *
 */
int cliente_setNombre(eCliente* this,char* nombre);

/** \brief Sets the client's last name
 *
 * \param this eCliente* The pointer to the list
 * \param apellido int The last name to set
 * \return int [-1] if the list or the last name pointer is NULL
               [0] if the last name was setted correctly
 *
 */
int cliente_setApellido(eCliente* this,char* apellido);

/** \brief Sets the client's e-mail
 *
 * \param this eCliente* The pointer to the list
 * \param email int The e-mail to set
 * \return int [-1] if the list or the e-mail pointer is NULL
               [0] if the e-mail was setted correctly
 *
 */
int cliente_setEmail(eCliente* this,char* email);

/** \brief Sets the client's phone
 *
 * \param this eCliente* The pointer to the list
 * \param telefono int The phone to set
 * \return int [-1] if the list or the phone pointer is NULL
               [0] if the phone was setted correctly
 *
 */
int cliente_setTelefono(eCliente* this,char* telefono);


/////////////// ABM ///////////////


/** \brief Deletes the client's list
 *
 * \param this eCliente* The pointer to the list
 * \return void
 *
 */
void cliente_delete(eCliente* this);

/** \brief Print's one element of the listing
 *
 * \param this eCliente* The pointer to the list
 * \return void
 *
 */
void cliente_printOne(eCliente* this);


/////////////// COMPARISONS ///////////////


/** \brief Compares two elements by their ID
 *
 * \param primerCliente void* The first element to compare
 * \param segundoCliente void* The second element to compare
 * \return int [-2] if the elements are NULL
               [-1] if the first element is smaller than the second
               [0] if both elements are equal
               [1] if the first element is bigger than the second
 *
 */
int cliente_compareByIdCliente(void* primerCliente, void* segundoCliente);

/** \brief Compares two elements by their car ID
 *
 * \param primerCliente void* The first element to compare
 * \param segundoCliente void* The second element to compare
 * \return int [-2] if the elements are NULL
               [-1] if the first element is smaller than the second
               [0] if both elements are equal
               [1] if the first element is bigger than the second
 *
 */
int cliente_compareByCarId(void* primerCliente, void* segundoCliente);

/** \brief Compares two elements by their name
 *
 * \param primerCliente void* The first element to compare
 * \param segundoCliente void* The second element to compare
 * \return int [-2] if the elements are NULL
               [-1] if the first element is smaller than the second
               [0] if both elements are equal
               [1] if the first element is bigger than the second
 *
 */
int cliente_compareByName(void* primerCliente, void* segundoCliente);

/** \brief Compares two elements by their last name
 *
 * \param primerCliente void* The first element to compare
 * \param segundoCliente void* The second element to compare
 * \return int [-2] if the elements are NULL
               [-1] if the first element is smaller than the second
               [0] if both elements are equal
               [1] if the first element is bigger than the second
 *
 */
int cliente_compareByLastName(void* primerCliente, void* segundoCliente);

/** \brief Compares two elements by their e-mail
 *
 * \param primerCliente void* The first element to compare
 * \param segundoCliente void* The second element to compare
 * \return int [-2] if the elements are NULL
               [-1] if the first element is smaller than the second
               [0] if both elements are equal
               [1] if the first element is bigger than the second
 *
 */
int cliente_compareByEmail(void* primerCliente, void* segundoCliente);

/** \brief Compares two elements by their phone
 *
 * \param primerCliente void* The first element to compare
 * \param segundoCliente void* The second element to compare
 * \return int [-2] if the elements are NULL
               [-1] if the first element is smaller than the second
               [0] if both elements are equal
               [1] if the first element is bigger than the second
 *
 */
int cliente_compareByPhone(void* primerCliente, void* segundoCliente);


/////////////// FILTERS ///////////////


/** \brief Filters a list by a criteria
 *
 * \param this void* The list to filter
 * \param criteria void* The criteria to filter
 * \return int [-1] if the list or criteria are NULL
               [0] if the filtering was successfull
 *
 */
int cliente_filterByName(void* this, void* criteria);

/** \brief Filters a list by a criteria
 *
 * \param this void* The list to filter
 * \param criteria void* The criteria to filter
 * \return int [-1] if the list or criteria are NULL
               [0] if the filtering was successfull
 *
 */
int cliente_filterByLastName(void* this, void* criteria);

/** \brief Filters a list by a criteria
 *
 * \param this void* The list to filter
 * \param criteria void* The criteria to filter
 * \return int [-1] if the list or criteria are NULL
               [0] if the filtering was successfull
 *
 */
int cliente_filterByCarId(void* this, void* criteria);

/** \brief Counts the number of appearences of a single element on the listing
 *
 * \param pElement void* The element to count
 * \return int [-1] if the list or criteria are NULL
               [0] if the filtering was successfull
 *
 */
int cliente_countClientsByLastName(void* pElement);

#endif /* CLIENTES_H_ */
